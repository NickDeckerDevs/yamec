!function e(t,n,i){function o(s,l){if(!n[s]){if(!t[s]){var a="function"==typeof require&&require;if(!l&&a)return a(s,!0);if(r)return r(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return o(n?n:e)},c,c.exports,e,t,n,i)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({"./src/js/editor.js":[function(e,t){"use strict";var n=function(e,t,n){t&&Object.defineProperties(e,t),n&&Object.defineProperties(e.prototype,n)},i=function(e){return e&&(e["default"]||e)},o=i(e("./helpers")),r=i(e("./selection")),s=i(e("./editor-toolbar")),l=i(e("./editor-serializer")),a=function(){function e(t){return"string"==typeof t&&(t=document.querySelectorAll(t)),o.isElement(t)?(this.dom=t,this.dom.setAttribute("contentEditable",!0),this.selection=new r,this.serializer=new l,this.toolbars={},this.commands={},this.events={},void this.initToolbar().addEvents().cleanContent()):o.slice.call(t).map(function(t){return new e(t)})}return n(e,null,{getContext:{value:function(){for(var e=this.selection.range.commonAncestorContainer;1!==e.nodeType;)e=e.parentNode;return e},writable:!0,enumerable:!0,configurable:!0},registerCommand:{value:function(e){if("string"==typeof e){var t=e,n=arguments[1];(e={})[t]=n}for(var i,r=o.keys(e)[Symbol.iterator]();!(i=r.next()).done;){var t=i.value;this.commands[t]=this.commands[t]||[],this.commands[t].push(e[t])}},writable:!0,enumerable:!0,configurable:!0},unregisterCommand:{value:function(e,t){var n,i;(n=this.commands[e])&&(void 0===t?delete this.commands[e]:-1!==(i=n.indexOf(t))&&(n.splice(i,1),0===n.length&&delete this.commands[e]))},writable:!0,enumerable:!0,configurable:!0},execCommand:{value:function(e,t,n){var i=this;this.selection.restore(),o.defer(function(){if(i.commands[e])for(var o,r=i.commands[e][Symbol.iterator]();!(o=r.next()).done;){var s=o.value;s.apply(i,[t,e])}else document.execCommand(e,!1,t);n&&i.selection.collapseToEnd(),i.trigger("execcommand",e),i.trigger("toolbar:inline")})},writable:!0,enumerable:!0,configurable:!0},on:{value:function(e,t){var n=this;e=e.split(" "),"string"==typeof t&&!function(){var e=t;t=function(){return n.trigger(e)}}();for(var i,o=e[Symbol.iterator]();!(i=o.next()).done;){var r=i.value;this.events[r]=this.events[r]||[],this.events[r].push(t)}return this},writable:!0,enumerable:!0,configurable:!0},off:{value:function(e,t){var n,i;e=e.split(" ");for(var o,r=e[Symbol.iterator]();!(o=r.next()).done;){var s=o.value;(n=this.events[s])&&(void 0===t?delete this.events[s]:-1!==(i=n.indexOf(t))&&(n.splice(i,1),0===n.length&&delete this.events[s]))}return this},writable:!0,enumerable:!0,configurable:!0},trigger:{value:function(e){var t,n,i=this,r=o.slice(arguments,1);if((t=/^toolbar:(.*)$/.exec(e))&&r.unshift(this.toolbars[t[1]]),n=this.events[e])for(var s,l=n[Symbol.iterator]();!(s=l.next()).done;)!function(){var e=s.value;o.defer(function(){return e.apply(i,r)})}();return this},writable:!0,enumerable:!0,configurable:!0},addEvents:{value:function(){for(var e,t=this,n=function(e){t.trigger(e.type,e)},i=["mouseup","mousedown","click","mouseover","mouseout","keyup","keydown","keypress","focus","blur"],r=i[Symbol.iterator]();!(e=r.next()).done;){var s=e.value;this.dom.addEventListener(s,n)}return this.on("mouseup keyup","toolbar:inline"),this.on("execcommand keydown keypress keyup",o.debounce(this.cleanContent,1e3).bind(this)),this},writable:!0,enumerable:!0,configurable:!0},cleanContent:{value:function(){return this},writable:!0,enumerable:!0,configurable:!0},addToolbar:{value:function(e,t,n){this.toolbars[e]=t,this.on("toolbar:"+e,n)},writable:!0,enumerable:!0,configurable:!0},detachToolbar:{value:function(e){var t=this.toolbars[e];return t&&(delete this.toolbars[e],this.off("toolbar:"+e)),t},writable:!0,enumerable:!0,configurable:!0},getToolbar:{value:function(e){return this.toolbars[e]},writable:!0,enumerable:!0,configurable:!0},initToolbar:{value:function(){var e=this;this.registerCommand({toggleLink:function(){var e,t=this;(e=this.selection.isWithin("a"))?(e.forEach(o.unwrap),this.selection.restore()):this.selection.contains("a")?this.execCommand("unlink"):this.getToolbar("inline").toggleInput("http://...",function(e){t.execCommand("createLink",e,!!e)})},toggleBlock:function(e){this.selection.isWithin(e)?this.execCommand("formatBlock","p"):this.execCommand("formatBlock",e)},toggleTag:function(e){var t;if(t=this.selection.isWithin(e))t.forEach(o.unwrap),this.selection.restore();else if(this.selection.contains(e)){var n=new RegExp("<"+e+"(.*?)>|</"+e+">","g");this.selection.replace(this.selection.html.replace(n,""))}else this.selection.replace("<"+e+">"+this.selection.html+"</"+e+">")}});var t=function(t,n){return function(){return e.execCommand(t,n)}},n=function(t){return function(){return"boolean"==typeof t?t:/^(a|code)$/.test(t)?e.selection.contains(t)||e.selection.isWithin(t):/^(h(2|3)|blockquote)$/.test(t)?e.selection.isWithin(t):document.queryCommandState(t)}},i=new s({onInputCancel:function(){e.selection.restore()},buttons:[{content:"B",action:t("bold"),active:n("bold")},{content:"I",action:t("italic"),active:n("italic")},{content:"A",action:t("toggleLink"),active:n("a")},{content:"H1",action:t("toggleBlock","h2"),active:n("h2")},{content:"H2",action:t("toggleBlock","h3"),active:n("h3")},{content:'"',action:t("toggleBlock","blockquote"),active:n("blockquote")},{content:"&lt;/&gt;",action:t("toggleTag","code"),active:n("code")}]});return this.addToolbar("inline",i,function(t){var n,i,r,s={};return e.selection.save(e.dom),e.selection.isCollapsed?void t.hide():(n=e.selection.getRangeBoundary(),s.x=(n.left+n.right)/2,s.y=window.pageYOffset,t.dom.style.display="block",i=t.dom.offsetHeight,r=t.dom.offsetWidth/2,t.dom.style.display="",n.top<i?(t.position("bottom"),s.y+=n.bottom):(t.position("top"),s.y+=n.top),s.x<r?s.x+=r-s.x:window.innerWidth-o.scrollbarWidth()-s.x<r&&(s.x-=r-(window.innerWidth-s.x-o.scrollbarWidth())),void t.show(s.x,s.y))}),this},writable:!0,enumerable:!0,configurable:!0}}),e}();window.Editor=a,t.exports=a},{"./editor-serializer":"/Users/wilwilsman/Documents/Projects/Editor/src/js/editor-serializer.js","./editor-toolbar":"/Users/wilwilsman/Documents/Projects/Editor/src/js/editor-toolbar.js","./helpers":"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js","./selection":"/Users/wilwilsman/Documents/Projects/Editor/src/js/selection.js"}],"/Users/wilwilsman/Documents/Projects/Editor/src/js/editor-serializer.js":[function(e,t){"use strict";function n(e,t){var n={open:"<"+e+">",close:"</"+e+">"};for(var i in t){var o=t[i];n.open=n.open.replace(">"," "),n.open+=i,(void 0===o||"boolean"!=typeof o)&&(n.open+='="'+o+'">')}return n}var i=function(e,t,n){t&&Object.defineProperties(e,t),n&&Object.defineProperties(e.prototype,n)},o=function(e){return e&&(e["default"]||e)},r=o(e("./helpers")),s=/^<([\w-]+)|\s+([\w-]+)(?:=?("|')(.*?)(\3))?/g,l=/hr|br|img/,a=/p|pre/,u=function(){function e(){var e=void 0===arguments[0]?{}:arguments[0],t=this.constructor.defaults;this.allowed=this.allowed||{},this.allowed.outer=e.outerElements||t.outerElements,this.allowed.inner=e.innerElements||t.innerElements,this.conversions=e.conversions||t.conversions,this.stripAttributes=e.stripAttributes||t.stripAttributes}return i(e,null,{sanitizeElement:{value:function(e,t,n){var i,o=t===this.elements?this.allowed.outer:this.allowed.inner;void 0===e.content||e.content||delete t[n],(i=this.conversions[e.tagName])&&(e.tagName=i),-1===o.indexOf(e.tagName)&&delete t[n];for(var r in e.attributes)-1!==this.stripAttributes.indexOf(r)&&delete e.attributes[r]},writable:!0,enumerable:!0,configurable:!0},serialize:{value:function(e){var t=this,n=function(e,n,i){t.sanitizeElement(e,i,n)};this.elements=r.slice.call(e.children).map(function(e){return t.serializeBlock(e)});for(var i,o=this.elements[Symbol.iterator]();!(i=o.next()).done;){var s=i.value;this.sanitizeElement(s,this.elements),a.test(s.tagName)&&s.children.forEach(n)}return this},writable:!0,enumerable:!0,configurable:!0},serializeBlock:{value:function(e){for(var t,n,i,o,a=0,u=r.toHTML(e),c=u.split(""),d=[],f=[],m=[],h=-1,p=function(){var e={tag:"",content:""};return m.push(e),h+=1,e},b=function(e){f.push(e),m.splice(h,1),h-=1},v=!1,g=!1;n=c[0];){o=c[1];var w=-1!==h?m[h]:null;if("<"===n&&(v=!0,"/"!==o?(w=p(),w.from=a):(g=!0,w.to=a-1,b(w))),v)g||(w.tag+=n);else{if(w)for(var y=h;y>-1;y--)m[y].content+=n;a+=1,d.push(n)}if(">"===n&&(v=!1,g=!1,w)){for(var C=null;null!==(C=s.exec(w.tag));)w.tagName=w.tagName||C[1],w.attributes=w.attributes||{},C[2]&&(w.attributes[C[2]]=void 0!==C[4]?C[4]:!0);l.test(w.tagName)&&(w.isVoid=!0,delete w.content,b(w))}i=c.shift()}return t=f.pop(),t.html=u,delete t.from,delete t.to,t.isVoid||(t.content=d.join(""),t.children=f),t},writable:!0,enumerable:!0,configurable:!0},toHTML:{value:function(){var e="";return this.elements.forEach(function(t){var i,o=n(t.tagName,t.attributes);return t.isVoid?void(e+=o.open):(i=t.content.split(""),0===i.length&&i.push(""),t.children.forEach(function(e){var t=n(e.tagName,e.attributes);i[e.from]=t.open+i[e.from],e.isVoid||(i[e.to]+=t.close)}),void(e+=o.open+i.join("")+o.close))}),e},writable:!0,enumerable:!0,configurable:!0}}),e}();u.defaults={outerElements:["h2","h3","p","blockquote","figure","pre","hr","ul","ol"],innerElements:["b","i","u","a","q","code","mark","br"],conversions:{strong:"b",em:"i"},stripAttributes:[]},t.exports=u},{"./helpers":"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js"}],"/Users/wilwilsman/Documents/Projects/Editor/src/js/editor-toolbar.js":[function(e,t){"use strict";var n=function(e,t,n){t&&Object.defineProperties(e,t),n&&Object.defineProperties(e.prototype,n)},i=function(e){return e&&(e["default"]||e)},o=i(e("./helpers")),r=/(?:^|\s)(pm--(top|bottom|left|right))(?:\s|$)/,s=function(){function e(){var e=void 0===arguments[0]?{}:arguments[0];this.buttons=e.buttons||{},document.body.appendChild(this.build()),this.position(e.position||"top"),this.cancelInput=e.onInputCancel||o.noop,this.hide()}return n(e,null,{show:{value:function(e,t){var n=this;return this.dom.style.display="",this.dom.style.top=t+"px",this.dom.style.left=e+"px",o.defer(function(){return n.dom.classList.add("pm--show")}),this.buttons.forEach(function(e){return e.toggle()}),this},writable:!0,enumerable:!0,configurable:!0},hide:{value:function(){return this.dom.style.display="none",this.dom.style.top=this.dom.style.left="",this.dom.classList.remove("pm--show"),this.toggleInput(!1),this},writable:!0,enumerable:!0,configurable:!0},visible:{get:function(){return this.dom.classList.contains("pm--show")},enumerable:!0,configurable:!0},toggleInput:{value:function(e,t,n,i){var r=this,s=this.dom.firstChild.lastChild,l="block"===s.style.display,a=arguments[arguments.length-1];if(i="boolean"==typeof a?a:void 0,n="function"==typeof t?t:n,n="function"==typeof n?n:void 0,e="string"==typeof e?e:"",t="string"==typeof t?t:"",/left|right/.test(this.position())&&(i=!1),l=void 0===i?l:!i,s.firstChild.setAttribute("placeholder",e),s.firstChild.value=t,l)s.style.display="",s.firstChild.value="",this.inputCallback=o.noop,this.dom.style.width="",this.dom.classList.remove("pm--input");else{this.inputCallback=n||o.noop,this.dom.style.width=this.dom.offsetWidth+"px",s.style.display="block";var u=this.dom.offsetWidth<s.offsetWidth;this.dom.style.width=u?s.offsetWidth+"px":"",o.defer(function(){return r.dom.classList.add("pm--input")})}},writable:!0,enumerable:!0,configurable:!0},position:{value:function(e){var t=r.exec(this.dom.className);return void 0===e?t[2]||null:/top|bottom|left|right/.test(e)?(t&&this.dom.classList.remove(t[1]),this.dom.classList.add("pm--"+e),/left|right/.test(e)&&this.toggleInput(!1),this):!1},writable:!0,enumerable:!0,configurable:!0},build:{value:function(){var e=this,t=document.createElement("div");t.className="pm",t.appendChild(document.createElement("ul")),this.buttons.forEach(function(n,i,o){var r=document.createElement("button");r.setAttribute("type","button"),r.className="pm__btn",0===i?r.classList.add("pm__btn--first"):i===o.length-1&&r.classList.add("pm__btn--last"),r.classList.add(n.className),r.innerHTML=n.content,r.addEventListener("click",n.action.bind(e)),n.element=t.firstChild.appendChild(document.createElement("li")).appendChild(r),n.toggle=function(){r.classList.toggle("active",n.active())}});var n=t.firstChild.appendChild(document.createElement("li")).appendChild(document.createElement("input"));return n.className="pm__control",this.inputCallback=o.noop,n.addEventListener("keyup",function(t){13===(t.which||t.keyCode)&&(e.inputCallback(n.value),e.toggleInput(!1))}),n.parentNode.addEventListener("transitionend",function(){return n.focus()}),n.parentNode.appendChild(document.createElement("div")).className="pm__cancel",n.nextElementSibling.addEventListener("click",function(){e.toggleInput(!1),e.cancelInput()}),this.dom=t},writable:!0,enumerable:!0,configurable:!0}}),e}();t.exports=s},{"./helpers":"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js"}],"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js":[function(e,t){"use strict";var n,i={slice:Array.prototype.slice,keys:Object.keys,isElement:function(e){return!(!e||1!==e.nodeType)},toHTML:function(e){var t,n=document.createElement("div");e=e.length?i.slice.call(e):[e];for(var o,r=e[Symbol.iterator]();!(o=r.next()).done;){var s=o.value;n.appendChild(s)}return t=n.innerHTML,n=null,t},unwrap:function(e){for(var t,n=e.parentNode,i=document.createDocumentFragment();t=e.firstChild;)i.appendChild(t);return n.insertBefore(i,e),n.removeChild(e),i},closest:function(e,t){for(var n;n=e.parentNode;)if(n===t)return n},getTextNodes:function(e){var t=[];if(3===e.nodeType)t.push(e);else for(var n,o=i.slice.call(e.childNodes),r=o[Symbol.iterator]();!(n=r.next()).done;){var s=n.value;t.push.apply(t,i.getTextNodes(s))}return t},scrollbarWidth:function(){if(n)return n;var e,t,i=document.createElement("div"),o=i.cloneNode();return i.style.visibility="hidden",i.style.width="100px",document.body.appendChild(i),e=i.offsetWidth,i.style.overflow="scroll",o.style.width="100%",i.appendChild(o),t=o.offsetWidth,i.parentNode.removeChild(i),n=e-t},noop:function(){},now:Date.now,delay:function(e,t){var n=i.slice.call(arguments,2);return setTimeout(function(){return e.apply(null,n)},t)},defer:function(e){return i.delay.apply(i,[e,1].concat(i.slice.call(arguments,1)))},debounce:function(e,t,n){var o,r,s,l,a,u=function(){var c=i.now()-l;t>c&&c>0?o=setTimeout(u,t-c):(o=null,n||(a=e.apply(s,r),o||(s=r=null)))};return function(){s=this,r=arguments,l=i.now();var c=n&&!o;return o||(o=setTimeout(u,t)),c&&(a=e.apply(s,r),s=r=null),a}}};t.exports=i},{}],"/Users/wilwilsman/Documents/Projects/Editor/src/js/selection.js":[function(e,t){"use strict";var n=function(e,t,n){t&&Object.defineProperties(e,t),n&&Object.defineProperties(e.prototype,n)},i=function(e){return e&&(e["default"]||e)},o=i(e("./helpers")),r=function(){function e(){return this.constructor.instance?this.constructor.instance:void(this.constructor.instance=this)}return n(e,null,{get:{value:function(){return window.getSelection()},writable:!0,enumerable:!0,configurable:!0},save:{value:function(e){var t=[],n=this.range;t[0]=e||n.commonAncestorContainer,t[2]=this.getCaretOffset(t[0]),t[1]=t[2]-n.toString().length,this.saved=t},writable:!0,enumerable:!0,configurable:!0},restore:{value:function(){this.saved&&this.select.apply(this,this.saved)},writable:!0,enumerable:!0,configurable:!0},getRangeBoundary:{value:function(){return this.range.getBoundingClientRect()},writable:!0,enumerable:!0,configurable:!0},collapseToEnd:{value:function(){this.get().collapseToEnd()},writable:!0,enumerable:!0,configurable:!0},select:{value:function(e,t,n){var i=this.get(),r=document.createRange();if(r.selectNode(e),void 0!==t&&void 0!==n)for(var s,l=o.getTextNodes(e),a=!1,u=0,c=void 0,d=l[Symbol.iterator]();!(s=d.next()).done;){var f=s.value;if(c=u+f.length,!a&&t>=u&&(c>t||t===c)&&(r.setStart(f,t-u),a=!0),a&&c>=n){r.setEnd(f,n-u);break}u=c}i.removeAllRanges(),i.addRange(r)},writable:!0,enumerable:!0,configurable:!0},replace:{value:function(e){var t,n,i=this.get(),o=this.range,r=o.cloneRange(),s=document.createElement("div"),l=document.createDocumentFragment();for(s.innerHTML=e;t=s.firstChild;)n=l.appendChild(t);o.deleteContents(),o.insertNode(l),n&&(r.setEndAfter(n),i.removeAllRanges(),i.addRange(r))},writable:!0,enumerable:!0,configurable:!0},getCaretOffset:{value:function(e){var t=this.range,n=t.cloneRange();return n.selectNodeContents(e),n.setEnd(t.endContainer,t.endOffset),n.toString().length},writable:!0,enumerable:!0,configurable:!0},contains:{value:function(e){var t=new RegExp("<"+e+"(.*?)>|</"+e+">");return t.test(this.html)},writable:!0,enumerable:!0,configurable:!0},isWithin:{value:function(e,t){var n=[],i=this.range,o=i.startContainer.parentNode,r=i.endContainer.parentNode,s=i.commonAncestorContainer;if(e=e.toUpperCase(),o.tagName===e&&n.push(o),r!==o&&r.tagName===e&&n.push(r),n.length>0)return n;for(t=void 0===t?document.body:t;s&&s!==t;){if(s.tagName&&s.tagName===e)return n.push(s),n;s=s.parentNode}return!1},writable:!0,enumerable:!0,configurable:!0},html:{get:function(){return o.toHTML(this.range.cloneContents())},enumerable:!0,configurable:!0},isCollapsed:{get:function(){return this.get().isCollapsed},enumerable:!0,configurable:!0},range:{get:function(){return this.get().getRangeAt(0)},enumerable:!0,configurable:!0}}),e}();t.exports=r},{"./helpers":"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js"}]},{},["./src/js/editor.js"]);
//# sourceMappingURL=data:application/json;base64,