!function e(t,n,o){function i(s,l){if(!n[s]){if(!t[s]){var a="function"==typeof require&&require;if(!l&&a)return a(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return i(n?n:e)},u,u.exports,e,t,n,o)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<o.length;s++)i(o[s]);return i}({"./src/js/editor.js":[function(e,t){"use strict";var n=function(e,t,n){t&&Object.defineProperties(e,t),n&&Object.defineProperties(e.prototype,n)},o=function(e){return e&&(e["default"]||e)},i=o(e("./helpers")),r=o(e("./selection")),s=o(e("./editor-toolbar")),l=function(){function e(t){return"string"==typeof t&&(t=document.querySelectorAll(t)),i.isElement(t)?(this.dom=t,this.dom.setAttribute("contentEditable",!0),this.selection=new r,this.commands={},this.events={},void this.initToolbar().addEvents()):i.slice.call(t).map(function(t){return new e(t)})}return n(e,null,{getContext:{value:function(){for(var e=this.selection.range.commonAncestorContainer;1!==e.nodeType;)e=e.parentNode;return e},writable:!0,enumerable:!0,configurable:!0},registerCommand:{value:function(e){if("string"==typeof e){var t=e,n=arguments[1];(e={})[t]=n}for(var o,r=i.keys(e)[Symbol.iterator]();!(o=r.next()).done;){var t=o.value;this.commands[t]=this.commands[t]||[],this.commands[t].push(e[t])}},writable:!0,enumerable:!0,configurable:!0},unregisterCommand:{value:function(e,t){var n,o;(n=this.commands[e])&&(void 0===t?delete this.commands[e]:-1!==(o=n.indexOf(t))&&(n.splice(o,1),0===n.length&&delete this.commands[e]))},writable:!0,enumerable:!0,configurable:!0},execCommand:{value:function(e,t,n){var o=this;this.selection.restore(),i.defer(function(){if(o.commands[e])for(var i,r=o.commands[e][Symbol.iterator]();!(i=r.next()).done;){var s=i.value;s.apply(o,[t,e])}else document.execCommand(e,!1,t);n?(o.selection.collapseToEnd(),o.toolbar.hide()):o.showToolbar()})},writable:!0,enumerable:!0,configurable:!0},on:{value:function(e,t){e=e.split(" ");for(var n,o=e[Symbol.iterator]();!(n=o.next()).done;){var i=n.value;this.events[i]=this.events[i]||[],this.events[i].push(t)}return this},writable:!0,enumerable:!0,configurable:!0},off:{value:function(e,t){var n,o;e=e.split(" ");for(var i,r=e[Symbol.iterator]();!(i=r.next()).done;){var s=i.value;(n=this.events[s])&&(void 0===t?delete this.events[s]:-1!==(o=n.indexOf(t))&&(n.splice(o,1),0===n.length&&delete this.events[s]))}return this},writable:!0,enumerable:!0,configurable:!0},trigger:{value:function(e){var t;if(t=this.events[e])for(var n,o=t[Symbol.iterator]();!(n=o.next()).done;){var r=n.value;r.apply(this,i.slice(arguments,1))}return this},writable:!0,enumerable:!0,configurable:!0},addEvents:{value:function(){for(var e,t=this,n=function(e){t.trigger(e.type,e)},o=["mouseup","mousedown","click","mouseover","mouseout","keyup","keydown","keypress","focus","blur"],i=o[Symbol.iterator]();!(e=i.next()).done;){var r=e.value;this.dom.addEventListener(r,n)}return this.on("mouseup keyup",this.showToolbar),this},writable:!0,enumerable:!0,configurable:!0},initToolbar:{value:function(){var e=this;this.registerCommand({toggleLink:function(){var e,t=this;(e=this.selection.isWithin("a"))?(e.forEach(i.unwrap),this.selection.restore()):this.selection.contains("a")?this.execCommand("unlink"):this.toolbar.toggleInput("http://...",function(e){t.execCommand("createLink",e,!!e)})},toggleBlock:function(e){this.selection.isWithin(e)?this.execCommand("formatBlock","p"):this.execCommand("formatBlock",e)},toggleTag:function(e){var t;if(t=this.selection.isWithin(e))t.forEach(i.unwrap),this.selection.restore();else if(this.selection.contains(e)){var n=new RegExp("<"+e+"(.*?)>|</"+e+">","g");this.selection.replace(this.selection.html.replace(n,""))}else this.selection.replace("<"+e+">"+this.selection.html+"</"+e+">")}});var t=function(t,n){return function(){return e.execCommand(t,n)}},n=function(t){return function(){return"boolean"==typeof t?t:/^(a|code)$/.test(t)?e.selection.contains(t)||e.selection.isWithin(t):/^(h(2|3)|blockquote)$/.test(t)?e.selection.isWithin(t):document.queryCommandState(t)}};return this.toolbar=new s({onInputCancel:function(){e.selection.restore()},buttons:[{content:"B",action:t("bold"),active:n("bold")},{content:"I",action:t("italic"),active:n("italic")},{content:"A",action:t("toggleLink"),active:n("a")},{content:"H1",action:t("toggleBlock","h2"),active:n("h2")},{content:"H2",action:t("toggleBlock","h3"),active:n("h3")},{content:'"',action:t("toggleBlock","blockquote"),active:n("blockquote")},{content:"&lt;/&gt;",action:t("toggleTag","code"),active:n("code")}]}),this},writable:!0,enumerable:!0,configurable:!0},showToolbar:{value:function(){var e,t,n,o={};return this.selection.save(),this.selection.isCollapsed?void this.toolbar.hide():(e=this.selection.getRangeBoundary(),o.x=(e.left+e.right)/2,o.y=window.pageYOffset,this.toolbar.dom.style.display="block",t=this.toolbar.dom.offsetHeight,n=this.toolbar.dom.offsetWidth/2,this.toolbar.dom.style.display="",e.top<t?(this.toolbar.position("bottom"),o.y+=e.bottom):(this.toolbar.position("top"),o.y+=e.top),o.x<n?o.x+=n-o.x:window.innerWidth-i.scrollbarWidth()-o.x<n&&(o.x-=n-(window.innerWidth-o.x-i.scrollbarWidth())),void this.toolbar.show(o.x,o.y))},writable:!0,enumerable:!0,configurable:!0}}),e}();window.Editor=l,t.exports=l},{"./editor-toolbar":"/Users/wilwilsman/Documents/Projects/Editor/src/js/editor-toolbar.js","./helpers":"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js","./selection":"/Users/wilwilsman/Documents/Projects/Editor/src/js/selection.js"}],"/Users/wilwilsman/Documents/Projects/Editor/src/js/editor-toolbar.js":[function(e,t){"use strict";var n=function(e,t,n){t&&Object.defineProperties(e,t),n&&Object.defineProperties(e.prototype,n)},o=function(e){return e&&(e["default"]||e)},i=o(e("./helpers")),r=/(?:^|\s)(pm--(top|bottom|left|right))(?:\s|$)/,s=function(){function e(){var e=void 0===arguments[0]?{}:arguments[0];this.buttons=e.buttons||{},document.body.appendChild(this.build()),this.position(e.position||"top"),this.cancelInput=e.onInputCancel||i.noop,this.hide()}return n(e,null,{show:{value:function(e,t){var n=this;return this.dom.style.display="",this.dom.style.top=t+"px",this.dom.style.left=e+"px",i.defer(function(){return n.dom.classList.add("pm--show")}),this.buttons.forEach(function(e){return e.toggle()}),this},writable:!0,enumerable:!0,configurable:!0},hide:{value:function(){return this.dom.style.display="none",this.dom.style.top=this.dom.style.left="",this.dom.classList.remove("pm--show"),this.toggleInput(!1),this},writable:!0,enumerable:!0,configurable:!0},visible:{get:function(){return this.dom.classList.contains("pm--show")},enumerable:!0,configurable:!0},toggleInput:{value:function(e,t,n,o){var r=this,s=this.dom.firstChild.lastChild,l="block"===s.style.display,a=arguments[arguments.length-1];if(o="boolean"==typeof a?a:void 0,n="function"==typeof t?t:n,n="function"==typeof n?n:void 0,e="string"==typeof e?e:"",t="string"==typeof t?t:"",/left|right/.test(this.position())&&(o=!1),l=void 0===o?l:!o,s.firstChild.setAttribute("placeholder",e),s.firstChild.value=t,l)s.style.display="",s.firstChild.value="",this.inputCallback=i.noop,this.dom.style.width="",this.dom.classList.remove("pm--input");else{this.inputCallback=n||i.noop,this.dom.style.width=this.dom.offsetWidth+"px",s.style.display="block";var c=this.dom.offsetWidth<s.offsetWidth;this.dom.style.width=c?s.offsetWidth+"px":"",i.defer(function(){return r.dom.classList.add("pm--input")})}},writable:!0,enumerable:!0,configurable:!0},position:{value:function(e){var t=r.exec(this.dom.className);return void 0===e?t[2]||null:/top|bottom|left|right/.test(e)?(t&&this.dom.classList.remove(t[1]),this.dom.classList.add("pm--"+e),/left|right/.test(e)&&this.toggleInput(!1),this):!1},writable:!0,enumerable:!0,configurable:!0},build:{value:function(){var e=this,t=document.createElement("div");t.className="pm",t.appendChild(document.createElement("ul")),this.buttons.forEach(function(n,o,i){var r=document.createElement("button");r.setAttribute("type","button"),r.className="pm__btn",0===o?r.classList.add("pm__btn--first"):o===i.length-1&&r.classList.add("pm__btn--last"),r.classList.add(n.className),r.innerHTML=n.content,r.addEventListener("click",n.action.bind(e)),n.element=t.firstChild.appendChild(document.createElement("li")).appendChild(r),n.toggle=function(){r.classList.toggle("active",n.active())}});var n=t.firstChild.appendChild(document.createElement("li")).appendChild(document.createElement("input"));return n.className="pm__control",this.inputCallback=i.noop,n.addEventListener("keyup",function(t){13===(t.which||t.keyCode)&&(e.inputCallback(n.value),e.toggleInput(!1))}),n.parentNode.addEventListener("transitionend",function(){return n.focus()}),n.parentNode.appendChild(document.createElement("div")).className="pm__cancel",n.nextElementSibling.addEventListener("click",function(){e.toggleInput(!1),e.cancelInput()}),this.dom=t},writable:!0,enumerable:!0,configurable:!0}}),e}();t.exports=s},{"./helpers":"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js"}],"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js":[function(e,t){"use strict";var n,o={slice:Array.prototype.slice,keys:Object.keys,isElement:function(e){return!(!e||1!==e.nodeType)},toHTML:function(e){var t,n=document.createElement("div");e=e.length?o.slice.call(e):[e];for(var i,r=e[Symbol.iterator]();!(i=r.next()).done;){var s=i.value;n.appendChild(s)}return t=n.innerHTML,n=null,t},unwrap:function(e){for(var t,n=e.parentNode,o=document.createDocumentFragment();t=e.firstChild;)o.appendChild(t);return n.insertBefore(o,e),n.removeChild(e),o},closest:function(e,t){for(var n;n=e.parentNode;)if(n===t)return n},getTextNodes:function(e){var t=[];if(3===e.nodeType)t.push(e);else for(var n,i=o.slice.call(e.childNodes),r=i[Symbol.iterator]();!(n=r.next()).done;){var s=n.value;t.push.apply(t,o.getTextNodes(s))}return t},scrollbarWidth:function(){if(n)return n;var e,t,o=document.createElement("div"),i=o.cloneNode();return o.style.visibility="hidden",o.style.width="100px",document.body.appendChild(o),e=o.offsetWidth,o.style.overflow="scroll",i.style.width="100%",o.appendChild(i),t=i.offsetWidth,o.parentNode.removeChild(o),n=e-t},noop:function(){},now:Date.now,delay:function(e,t){var n=o.slice.call(arguments,2);return setTimeout(function(){return e.apply(null,n)},t)},defer:function(e){return o.delay.apply(o,[e,1].concat(o.slice.call(arguments,1)))}};t.exports=o},{}],"/Users/wilwilsman/Documents/Projects/Editor/src/js/selection.js":[function(e,t){"use strict";var n=function(e,t,n){t&&Object.defineProperties(e,t),n&&Object.defineProperties(e.prototype,n)},o=function(e){return e&&(e["default"]||e)},i=o(e("./helpers")),r=function(){function e(){return this.constructor.instance?this.constructor.instance:void(this.constructor.instance=this)}return n(e,null,{get:{value:function(){return window.getSelection()},writable:!0,enumerable:!0,configurable:!0},save:{value:function(){var e=[],t=this.range;e[0]=t.commonAncestorContainer,e[2]=this.getCaretOffset(e[0]),e[1]=e[2]-t.toString().length,this.saved=e},writable:!0,enumerable:!0,configurable:!0},restore:{value:function(){this.select.apply(this,this.saved)},writable:!0,enumerable:!0,configurable:!0},getRangeBoundary:{value:function(){return this.range.getBoundingClientRect()},writable:!0,enumerable:!0,configurable:!0},collapseToEnd:{value:function(){this.get().collapseToEnd()},writable:!0,enumerable:!0,configurable:!0},select:{value:function(e,t,n){var o=this.get(),r=document.createRange();if(r.selectNode(e),void 0!==t&&void 0!==n)for(var s,l=i.getTextNodes(e),a=!1,c=0,u=void 0,d=l[Symbol.iterator]();!(s=d.next()).done;){var h=s.value;if(u=c+h.length,!a&&t>=c&&(u>t||t===u)&&(r.setStart(h,t-c),a=!0),a&&u>=n){r.setEnd(h,n-c);break}c=u}o.removeAllRanges(),o.addRange(r)},writable:!0,enumerable:!0,configurable:!0},replace:{value:function(e){var t,n,o=this.get(),i=this.range,r=i.cloneRange(),s=document.createElement("div"),l=document.createDocumentFragment();for(s.innerHTML=e;t=s.firstChild;)n=l.appendChild(t);i.deleteContents(),i.insertNode(l),n&&(r.setEndAfter(n),o.removeAllRanges(),o.addRange(r))},writable:!0,enumerable:!0,configurable:!0},getCaretOffset:{value:function(e){var t=this.range,n=t.cloneRange();return n.selectNodeContents(e),n.setEnd(t.endContainer,t.endOffset),n.toString().length},writable:!0,enumerable:!0,configurable:!0},contains:{value:function(e){var t=new RegExp("<"+e+"(.*?)>|</"+e+">");return t.test(this.html)},writable:!0,enumerable:!0,configurable:!0},isWithin:{value:function(e,t){var n=[],o=this.range,i=o.startContainer.parentNode,r=o.endContainer.parentNode,s=o.commonAncestorContainer;if(e=e.toUpperCase(),i.tagName===e&&n.push(i),r!==i&&r.tagName===e&&n.push(r),n.length>0)return n;for(t=void 0===t?document.body:t;s&&s!==t;){if(s.tagName&&s.tagName===e)return n.push(s),n;s=s.parentNode}return!1},writable:!0,enumerable:!0,configurable:!0},html:{get:function(){return i.toHTML(this.range.cloneContents())},enumerable:!0,configurable:!0},isCollapsed:{get:function(){return this.get().isCollapsed},enumerable:!0,configurable:!0},range:{get:function(){return this.get().getRangeAt(0)},enumerable:!0,configurable:!0}}),e}();t.exports=r},{"./helpers":"/Users/wilwilsman/Documents/Projects/Editor/src/js/helpers.js"}]},{},["./src/js/editor.js"]);
//# sourceMappingURL=data:application/json;base64,